# SPDX-License-Identifier: GPL-2.0
#
# ublkl block device driver configuration
#

config BLK_DEV_UBLK
	tristate "Userspace block driver (Experimental)"
	select IO_URING
	help
	  io_uring based userspace block driver. Together with ublk server, ublk
	  has been working well, but interface with userspace or command data
	  definition isn't finalized yet, and might change according to future
	  requirement, so mark is as experimental now.

	  Say Y if you want to get better performance because task_work_add()
	  can be used in IO path for replacing io_uring cmd, which will become
	  shared between IO tasks and ubq daemon, meantime task_work_add() can
	  can handle batch more effectively, but task_work_add() isn't exported
	  for module, so ublk has to be built to kernel.

config BLKDEV_UBLK_LEGACY_OPCODES
	bool "Support legacy command opcode"
	depends on BLK_DEV_UBLK
	default y
	help
	  ublk driver started to take plain command encoding, which turns out
	  one bad way. The traditional ioctl command opcode encodes more
	  info and basically defines each code uniquely, so opcode conflict
	  is avoided, and driver can handle wrong command easily, meantime it
	  may help security subsystem to audit io_uring command.

	  Say Y if your application still uses legacy command opcode.

	  Say N if you don't want to support legacy command opcode. It is
	  suggested to enable N if your application(ublk server) switches to
	  ioctl command encoding.

config UBLK_BPF
	bool "UBLK-BPF support"
	depends on BPF
	depends on BLK_DEV_UBLK
	help
	This option allows to support eBPF programs on the UBLK subsystem.
	eBPF programs can handle fast IO code path directly in kernel space,
	and avoid to switch to ublk daemon userspace conext, meantime zero
	copy can be supported directly.

	Usually target code need to partition into two parts: fast io code path
	which is run as eBPF prog in kernel context, and slow & complicated
	meta/admin code path which is run in ublk daemon userspace context.
	And use efficient bpf map for communication between user mode and
	kernel bpf prog.
